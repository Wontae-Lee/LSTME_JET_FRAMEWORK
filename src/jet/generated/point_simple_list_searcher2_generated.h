// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_POINTSIMPLELISTSEARCHER2_JET_FBS_H_
#define FLATBUFFERS_GENERATED_POINTSIMPLELISTSEARCHER2_JET_FBS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 22 && FLATBUFFERS_VERSION_MINOR == 11 && FLATBUFFERS_VERSION_REVISION == 23,
              "Non-compatible flatbuffers version included");

#include "basic_types_generated.h"

namespace jet {
namespace fbs {

struct PointSimpleListSearcher2;
struct PointSimpleListSearcher2Builder;

struct PointSimpleListSearcher2 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table
{
  typedef PointSimpleListSearcher2Builder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE
  {
    VT_POINTS = 4
  };
  const flatbuffers::Vector<const jet::fbs::Vector2D*>* points() const
  {
    return GetPointer<const flatbuffers::Vector<const jet::fbs::Vector2D*>*>(VT_POINTS);
  }
  bool Verify(flatbuffers::Verifier& verifier) const
  {
    return VerifyTableStart(verifier) && VerifyOffset(verifier, VT_POINTS) && verifier.VerifyVector(points()) && verifier.EndTable();
  }
};

struct PointSimpleListSearcher2Builder
{
  typedef PointSimpleListSearcher2 Table;
  flatbuffers::FlatBufferBuilder& fbb_;
  flatbuffers::uoffset_t start_;
  void add_points(flatbuffers::Offset<flatbuffers::Vector<const jet::fbs::Vector2D*>> points)
  {
    fbb_.AddOffset(PointSimpleListSearcher2::VT_POINTS, points);
  }
  explicit PointSimpleListSearcher2Builder(flatbuffers::FlatBufferBuilder& _fbb)
    : fbb_(_fbb)
  {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<PointSimpleListSearcher2> Finish()
  {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PointSimpleListSearcher2>(end);
    return o;
  }
};

inline flatbuffers::Offset<PointSimpleListSearcher2>
CreatePointSimpleListSearcher2(flatbuffers::FlatBufferBuilder& _fbb, flatbuffers::Offset<flatbuffers::Vector<const jet::fbs::Vector2D*>> points = 0)
{
  PointSimpleListSearcher2Builder builder_(_fbb);
  builder_.add_points(points);
  return builder_.Finish();
}

inline flatbuffers::Offset<PointSimpleListSearcher2>
CreatePointSimpleListSearcher2Direct(flatbuffers::FlatBufferBuilder& _fbb, const std::vector<jet::fbs::Vector2D>* points = nullptr)
{
  auto points__ = points ? _fbb.CreateVectorOfStructs<jet::fbs::Vector2D>(*points) : 0;
  return jet::fbs::CreatePointSimpleListSearcher2(_fbb, points__);
}

inline const jet::fbs::PointSimpleListSearcher2*
GetPointSimpleListSearcher2(const void* buf)
{
  return flatbuffers::GetRoot<jet::fbs::PointSimpleListSearcher2>(buf);
}

inline const jet::fbs::PointSimpleListSearcher2*
GetSizePrefixedPointSimpleListSearcher2(const void* buf)
{
  return flatbuffers::GetSizePrefixedRoot<jet::fbs::PointSimpleListSearcher2>(buf);
}

inline bool
VerifyPointSimpleListSearcher2Buffer(flatbuffers::Verifier& verifier)
{
  return verifier.VerifyBuffer<jet::fbs::PointSimpleListSearcher2>(nullptr);
}

inline bool
VerifySizePrefixedPointSimpleListSearcher2Buffer(flatbuffers::Verifier& verifier)
{
  return verifier.VerifySizePrefixedBuffer<jet::fbs::PointSimpleListSearcher2>(nullptr);
}

inline void
FinishPointSimpleListSearcher2Buffer(flatbuffers::FlatBufferBuilder& fbb, flatbuffers::Offset<jet::fbs::PointSimpleListSearcher2> root)
{
  fbb.Finish(root);
}

inline void
FinishSizePrefixedPointSimpleListSearcher2Buffer(flatbuffers::FlatBufferBuilder& fbb, flatbuffers::Offset<jet::fbs::PointSimpleListSearcher2> root)
{
  fbb.FinishSizePrefixed(root);
}

} // namespace fbs
} // namespace jet

#endif // FLATBUFFERS_GENERATED_POINTSIMPLELISTSEARCHER2_JET_FBS_H_
