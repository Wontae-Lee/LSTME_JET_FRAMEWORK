// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_SCALARGRID3_JET_FBS_H_
#define FLATBUFFERS_GENERATED_SCALARGRID3_JET_FBS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 22 && FLATBUFFERS_VERSION_MINOR == 11 && FLATBUFFERS_VERSION_REVISION == 23,
              "Non-compatible flatbuffers version included");

#include "basic_types_generated.h"

namespace jet {
namespace fbs {

struct ScalarGrid3;
struct ScalarGrid3Builder;

struct ScalarGrid3 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table
{
  typedef ScalarGrid3Builder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE
  {
    VT_RESOLUTION = 4,
    VT_GRIDSPACING = 6,
    VT_ORIGIN = 8,
    VT_DATA = 10
  };
  const jet::fbs::Size3* resolution() const { return GetStruct<const jet::fbs::Size3*>(VT_RESOLUTION); }
  const jet::fbs::Vector3D* gridSpacing() const { return GetStruct<const jet::fbs::Vector3D*>(VT_GRIDSPACING); }
  const jet::fbs::Vector3D* origin() const { return GetStruct<const jet::fbs::Vector3D*>(VT_ORIGIN); }
  const flatbuffers::Vector<double>* data() const { return GetPointer<const flatbuffers::Vector<double>*>(VT_DATA); }
  bool Verify(flatbuffers::Verifier& verifier) const
  {
    return VerifyTableStart(verifier) && VerifyField<jet::fbs::Size3>(verifier, VT_RESOLUTION, 8) &&
           VerifyField<jet::fbs::Vector3D>(verifier, VT_GRIDSPACING, 8) && VerifyField<jet::fbs::Vector3D>(verifier, VT_ORIGIN, 8) &&
           VerifyOffset(verifier, VT_DATA) && verifier.VerifyVector(data()) && verifier.EndTable();
  }
};

struct ScalarGrid3Builder
{
  typedef ScalarGrid3 Table;
  flatbuffers::FlatBufferBuilder& fbb_;
  flatbuffers::uoffset_t start_;
  void add_resolution(const jet::fbs::Size3* resolution) { fbb_.AddStruct(ScalarGrid3::VT_RESOLUTION, resolution); }
  void add_gridSpacing(const jet::fbs::Vector3D* gridSpacing) { fbb_.AddStruct(ScalarGrid3::VT_GRIDSPACING, gridSpacing); }
  void add_origin(const jet::fbs::Vector3D* origin) { fbb_.AddStruct(ScalarGrid3::VT_ORIGIN, origin); }
  void add_data(flatbuffers::Offset<flatbuffers::Vector<double>> data) { fbb_.AddOffset(ScalarGrid3::VT_DATA, data); }
  explicit ScalarGrid3Builder(flatbuffers::FlatBufferBuilder& _fbb)
    : fbb_(_fbb)
  {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ScalarGrid3> Finish()
  {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ScalarGrid3>(end);
    return o;
  }
};

inline flatbuffers::Offset<ScalarGrid3>
CreateScalarGrid3(flatbuffers::FlatBufferBuilder& _fbb,
                  const jet::fbs::Size3* resolution = nullptr,
                  const jet::fbs::Vector3D* gridSpacing = nullptr,
                  const jet::fbs::Vector3D* origin = nullptr,
                  flatbuffers::Offset<flatbuffers::Vector<double>> data = 0)
{
  ScalarGrid3Builder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_origin(origin);
  builder_.add_gridSpacing(gridSpacing);
  builder_.add_resolution(resolution);
  return builder_.Finish();
}

inline flatbuffers::Offset<ScalarGrid3>
CreateScalarGrid3Direct(flatbuffers::FlatBufferBuilder& _fbb,
                        const jet::fbs::Size3* resolution = nullptr,
                        const jet::fbs::Vector3D* gridSpacing = nullptr,
                        const jet::fbs::Vector3D* origin = nullptr,
                        const std::vector<double>* data = nullptr)
{
  auto data__ = data ? _fbb.CreateVector<double>(*data) : 0;
  return jet::fbs::CreateScalarGrid3(_fbb, resolution, gridSpacing, origin, data__);
}

inline const jet::fbs::ScalarGrid3*
GetScalarGrid3(const void* buf)
{
  return flatbuffers::GetRoot<jet::fbs::ScalarGrid3>(buf);
}

inline const jet::fbs::ScalarGrid3*
GetSizePrefixedScalarGrid3(const void* buf)
{
  return flatbuffers::GetSizePrefixedRoot<jet::fbs::ScalarGrid3>(buf);
}

inline bool
VerifyScalarGrid3Buffer(flatbuffers::Verifier& verifier)
{
  return verifier.VerifyBuffer<jet::fbs::ScalarGrid3>(nullptr);
}

inline bool
VerifySizePrefixedScalarGrid3Buffer(flatbuffers::Verifier& verifier)
{
  return verifier.VerifySizePrefixedBuffer<jet::fbs::ScalarGrid3>(nullptr);
}

inline void
FinishScalarGrid3Buffer(flatbuffers::FlatBufferBuilder& fbb, flatbuffers::Offset<jet::fbs::ScalarGrid3> root)
{
  fbb.Finish(root);
}

inline void
FinishSizePrefixedScalarGrid3Buffer(flatbuffers::FlatBufferBuilder& fbb, flatbuffers::Offset<jet::fbs::ScalarGrid3> root)
{
  fbb.FinishSizePrefixed(root);
}

} // namespace fbs
} // namespace jet

#endif // FLATBUFFERS_GENERATED_SCALARGRID3_JET_FBS_H_
